theme(panel.background = element_rect("white"),
panel.border = element_rect(NA),
panel.grid = element_line("grey95"),
legend.position = "none")
<
plot_original_incl4 <- random.effects(modelo_final_hlm2)%>%
rename(v1j = 2) %>%
rownames_to_column("Empresa") %>%
slice(151:194) %>%
mutate(color_v0j = ifelse(v1j < 0, "A", "B"),
hjust_v0j = ifelse(v1j > 0, 1.15, -0.15)) %>%
arrange(Empresa) %>%
ggplot(aes(label = format(v1j, digits = 2),
hjust = hjust_v1j)) +
geom_bar(aes(x = fct_rev(Empresa), y = v1j, fill = color_v1j),
stat = "identity", color = "black") +
geom_text(aes(x = Empresa, y = 0), size = 4.1, color = "black") +
coord_flip() +
labs(x = "Empresa",
y = expression(nu[1][j])) +
scale_fill_manual("oi", values = c("firebrick1","green1")) +
theme(panel.background = element_rect("white"),
panel.border = element_rect(NA),
panel.grid = element_line("grey95"),
legend.position = "none")
# Dividindo o gráfico em quatro partes
plot_dividido_incl <- plot_grid(plot_original_incl1, plot_original_incl2, plot_original_incl3, plot_original_incl4,
ncol = 2, nrow = 2)
# Exibir o gráfico dividido
plot_dividido_incl
# Gráfico dos efeitos aleatórios e inclinação por empresa (dividos em 4 gráficos)
plot_original_incl1 <- random.effects(modelo_final_hlm2)%>%
rename(v1j = 2) %>%
rownames_to_column("Empresa") %>%
slice(1:50) %>%
mutate(color_v0j = ifelse(v1j < 0, "A", "B"),
hjust_v0j = ifelse(v1j > 0, 1.15, -0.15)) %>%
arrange(Empresa) %>%
ggplot(aes(label = format(v1j, digits = 2),
hjust = hjust_v1j)) +
geom_bar(aes(x = fct_rev(Empresa), y = v1j, fill = color_v1j),
stat = "identity", color = "black") +
geom_text(aes(x = Empresa, y = 0), size = 4.1, color = "black") +
coord_flip() +
labs(x = "Empresa",
y = expression(nu[1][j])) +
scale_fill_manual("oi", values = c("firebrick1","green1")) +
theme(panel.background = element_rect("white"),
panel.border = element_rect(NA),
panel.grid = element_line("grey95"),
legend.position = "none")
plot_original_incl2 <- random.effects(modelo_final_hlm2)%>%
rename(v1j = 2) %>%
rownames_to_column("Empresa") %>%
slice(51:100) %>%
mutate(color_v0j = ifelse(v1j < 0, "A", "B"),
hjust_v0j = ifelse(v1j > 0, 1.15, -0.15)) %>%
arrange(Empresa) %>%
ggplot(aes(label = format(v1j, digits = 2),
hjust = hjust_v1j)) +
geom_bar(aes(x = fct_rev(Empresa), y = v1j, fill = color_v1j),
stat = "identity", color = "black") +
geom_text(aes(x = Empresa, y = 0), size = 4.1, color = "black") +
coord_flip() +
labs(x = "Empresa",
y = expression(nu[1][j])) +
scale_fill_manual("oi", values = c("firebrick1","green1")) +
theme(panel.background = element_rect("white"),
panel.border = element_rect(NA),
panel.grid = element_line("grey95"),
legend.position = "none")
plot_original_incl3 <- random.effects(modelo_final_hlm2)%>%
rename(v1j = 2) %>%
rownames_to_column("Empresa") %>%
slice(101:150) %>%
mutate(color_v0j = ifelse(v1j < 0, "A", "B"),
hjust_v0j = ifelse(v1j > 0, 1.15, -0.15)) %>%
arrange(Empresa) %>%
ggplot(aes(label = format(v1j, digits = 2),
hjust = hjust_v1j)) +
geom_bar(aes(x = fct_rev(Empresa), y = v1j, fill = color_v1j),
stat = "identity", color = "black") +
geom_text(aes(x = Empresa, y = 0), size = 4.1, color = "black") +
coord_flip() +
labs(x = "Empresa",
y = expression(nu[1][j])) +
scale_fill_manual("oi", values = c("firebrick1","green1")) +
theme(panel.background = element_rect("white"),
panel.border = element_rect(NA),
panel.grid = element_line("grey95"),
legend.position = "none")
plot_original_incl4 <- random.effects(modelo_final_hlm2)%>%
rename(v1j = 2) %>%
rownames_to_column("Empresa") %>%
slice(151:194) %>%
mutate(color_v0j = ifelse(v1j < 0, "A", "B"),
hjust_v0j = ifelse(v1j > 0, 1.15, -0.15)) %>%
arrange(Empresa) %>%
ggplot(aes(label = format(v1j, digits = 2),
hjust = hjust_v1j)) +
geom_bar(aes(x = fct_rev(Empresa), y = v1j, fill = color_v1j),
stat = "identity", color = "black") +
geom_text(aes(x = Empresa, y = 0), size = 4.1, color = "black") +
coord_flip() +
labs(x = "Empresa",
y = expression(nu[1][j])) +
scale_fill_manual("oi", values = c("firebrick1","green1")) +
theme(panel.background = element_rect("white"),
panel.border = element_rect(NA),
panel.grid = element_line("grey95"),
legend.position = "none")
# Dividindo o gráfico em quatro partes
plot_dividido_incl <- plot_grid(plot_original_incl1, plot_original_incl2, plot_original_incl3, plot_original_incl4,
ncol = 2, nrow = 2)
plot_original_incl1
#Para observarmos graficamente o comportamento dos valores de v1j, ou seja
#das inclinações aleatórias por escola, podemos comandar
random.effects(modelo_final_hlm2)%>%
rename(v1j = 2) %>%
rownames_to_column("Empresa") %>%
mutate(color_v1j = ifelse(v1j < 0, "A", "B"),
hjust_v1j = ifelse(v1j > 0, 1.15, -0.15)) %>%
arrange(Empresa) %>%
ggplot(aes(label = format(v1j, digits = 2),
hjust = hjust_v1j)) +
geom_bar(aes(x = fct_rev(Empresa), y = v1j, fill = color_v1j),
stat = "identity", color = "black") +
geom_text(aes(x = Empresa, y = 0), size = 4.1, color = "black") +
coord_flip() +
labs(x = "Empresa",
y = expression(nu[1][j])) +
scale_fill_manual("oi", values = c("firebrick1","green1")) +
theme(panel.background = element_rect("white"),
panel.border = element_rect(NA),
panel.grid = element_line("grey95"),
legend.position = "none")
# Gráfico dos efeitos aleatórios e inclinação por empresa (dividos em 4 gráficos)
plot_original_incl1 <- random.effects(modelo_final_hlm2)%>%
rename(v1j = 2) %>%
rownames_to_column("Empresa") %>%
slice(1:50) %>%
mutate(color_v1j = ifelse(v1j < 0, "A", "B"),
hjust_v1j = ifelse(v1j > 0, 1.15, -0.15)) %>%
arrange(Empresa) %>%
ggplot(aes(label = format(v1j, digits = 2),
hjust = hjust_v1j)) +
geom_bar(aes(x = fct_rev(Empresa), y = v1j, fill = color_v1j),
stat = "identity", color = "black") +
geom_text(aes(x = Empresa, y = 0), size = 4.1, color = "black") +
coord_flip() +
labs(x = "Empresa",
y = expression(nu[1][j])) +
scale_fill_manual("oi", values = c("firebrick1","green1")) +
theme(panel.background = element_rect("white"),
panel.border = element_rect(NA),
panel.grid = element_line("grey95"),
legend.position = "none")
plot_original_incl2 <- random.effects(modelo_final_hlm2)%>%
rename(v1j = 2) %>%
rownames_to_column("Empresa") %>%
slice(51:100) %>%
mutate(color_v1j = ifelse(v1j < 0, "A", "B"),
hjust_v1j = ifelse(v1j > 0, 1.15, -0.15)) %>%
arrange(Empresa) %>%
ggplot(aes(label = format(v1j, digits = 2),
hjust = hjust_v1j)) +
geom_bar(aes(x = fct_rev(Empresa), y = v1j, fill = color_v1j),
stat = "identity", color = "black") +
geom_text(aes(x = Empresa, y = 0), size = 4.1, color = "black") +
coord_flip() +
labs(x = "Empresa",
y = expression(nu[1][j])) +
scale_fill_manual("oi", values = c("firebrick1","green1")) +
theme(panel.background = element_rect("white"),
panel.border = element_rect(NA),
panel.grid = element_line("grey95"),
legend.position = "none")
plot_original_incl3 <- random.effects(modelo_final_hlm2)%>%
rename(v1j = 2) %>%
rownames_to_column("Empresa") %>%
slice(101:150) %>%
mutate(color_v1j = ifelse(v1j < 0, "A", "B"),
hjust_v1j = ifelse(v1j > 0, 1.15, -0.15)) %>%
arrange(Empresa) %>%
ggplot(aes(label = format(v1j, digits = 2),
hjust = hjust_v1j)) +
geom_bar(aes(x = fct_rev(Empresa), y = v1j, fill = color_v1j),
stat = "identity", color = "black") +
geom_text(aes(x = Empresa, y = 0), size = 4.1, color = "black") +
coord_flip() +
labs(x = "Empresa",
y = expression(nu[1][j])) +
scale_fill_manual("oi", values = c("firebrick1","green1")) +
theme(panel.background = element_rect("white"),
panel.border = element_rect(NA),
panel.grid = element_line("grey95"),
legend.position = "none")
plot_original_incl4 <- random.effects(modelo_final_hlm2)%>%
rename(v1j = 2) %>%
rownames_to_column("Empresa") %>%
slice(151:194) %>%
mutate(color_v1j = ifelse(v1j < 0, "A", "B"),
hjust_v1j = ifelse(v1j > 0, 1.15, -0.15)) %>%
arrange(Empresa) %>%
ggplot(aes(label = format(v1j, digits = 2),
hjust = hjust_v1j)) +
geom_bar(aes(x = fct_rev(Empresa), y = v1j, fill = color_v1j),
stat = "identity", color = "black") +
geom_text(aes(x = Empresa, y = 0), size = 4.1, color = "black") +
coord_flip() +
labs(x = "Empresa",
y = expression(nu[1][j])) +
scale_fill_manual("oi", values = c("firebrick1","green1")) +
theme(panel.background = element_rect("white"),
panel.border = element_rect(NA),
panel.grid = element_line("grey95"),
legend.position = "none")
# Dividindo o gráfico em quatro partes
plot_dividido_incl <- plot_grid(plot_original_incl1, plot_original_incl2, plot_original_incl3, plot_original_incl4,
ncol = 2, nrow = 2)
# Exibir o gráfico dividido
plot_dividido_incl
# Encontrar o menor valor dos efeitos de inclinação
random_effects_incl <- random.effects(modelo_final_hlm2)[[2]]
# Encontrar o menor valor dos efeitos de inclinação
random_effects_incl <- random.effects(modelo_final_hlm2)[[2]]
menor_valor_incl <- min(random_effects_incl[, 1])
indice_menor_incl <- which.min(random_effects_incl[, 1])
menor_valor_incl <- min(random_effects_incl)
indice_menor_incl <- which.min(random_effects_incl)
# Encontrar o maior valor dos efeitos de itercepto
maior_valor_incl <- max(random_effects_incl)
indice_maior_incl <- which.max(random_effects_incl)
# Imprimir os resultados
print(paste("Menor intercepto:", menor_valor_incl))
print(paste("Empresa:", indice_menor_incl))
print(paste("Maior valor:", maior_valor_incl))
print(paste("Empresa:", indice_maior_incl))
#Gerando os fitted values do modelo HLM2 Final
dados_filtrados$hlm2_fitted <- predict(modelo_final_hlm2,
dados_filtrados)
View(dados_filtrados)
# Visualizando os fitted values do modelo
#Visualizando os fitted values por estudante e por escola
predict(modelo_final_hlm2, level = 0:1) %>%
mutate(desempenho = dados_filtrados$ROA,
etjk = resid(modelo_final_hlm2)) %>% #função resid gera os termos etjk
select(empresa_factor, desempenho, everything()) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 18)
# Visualizando os fitted values do modelo
#Visualizando os fitted values por estudante e por escola
predict(modelo_final_hlm2, level = 0:1) %>%
mutate(desempenho = dados_filtrados$ROA,
etjk = resid(modelo_final_hlm2)) %>% #função resid gera os termos etjk
select(empresa_factor, desempenho, everything()) %>%
arrange(empresa_factor) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 18)
View(dados_filtrados)
#Valores previstos do desempenho das empresas em função da variável exportaçoes para o
#modelo final HLM2 com interceptos e inclinações aleatórios
dados_filtrados %>%
mutate(fitted_empresa = predict(modelo_final_hlm2, level = 1)) %>%
ggplot() +
geom_point(aes(x = exportacoes, y = fitted_empresa)) +
geom_smooth(aes(x = exportacoes, y = fitted_empresa, color = factor(empresa_factor)),
method = "lm", se = F) +
scale_colour_viridis_d() +
labs(x = "Exportaçoes",
y = "Desempenho da empresa - ROA (Fitted Values)") +
theme_bw()
#Valores previstos do desempenho das empresas em função da variável exportaçoes para o
#modelo final HLM2 com interceptos e inclinações aleatórios
dados_filtrados %>%
slice(1:50)%>%
mutate(fitted_empresa = predict(modelo_final_hlm2, level = 1)) %>%
ggplot() +
geom_point(aes(x = exportacoes, y = fitted_empresa)) +
geom_smooth(aes(x = exportacoes, y = fitted_empresa, color = factor(empresa_factor)),
method = "lm", se = F) +
scale_colour_viridis_d() +
labs(x = "Exportaçoes",
y = "Desempenho da empresa - ROA (Fitted Values)") +
theme_bw()
#Valores previstos do desempenho das empresas em função da variável exportaçoes para o
#modelo final HLM2 com interceptos e inclinações aleatórios
dados_filtrados %>%
mutate(fitted_empresa = predict(modelo_final_hlm2, level = 1)) %>%
slice(1:50)%>%
ggplot() +
geom_point(aes(x = exportacoes, y = fitted_empresa)) +
geom_smooth(aes(x = exportacoes, y = fitted_empresa, color = factor(empresa_factor)),
method = "lm", se = F) +
scale_colour_viridis_d() +
labs(x = "Exportaçoes",
y = "Desempenho da empresa - ROA (Fitted Values)") +
theme_bw()
#Valores previstos do desempenho das empresas em função da variável exportaçoes para o
#modelo final HLM2 com interceptos e inclinações aleatórios
dados_filtrados %>%
slice(1:50)%>%
mutate(fitted_empresa = predict(modelo_final_hlm2, level = 1)) %>%
ggplot() +
geom_point(aes(x = exportacoes, y = fitted_empresa)) +
geom_smooth(aes(x = exportacoes, y = fitted_empresa, color = factor(empresa_factor)),
method = "lm", se = F) +
scale_colour_viridis_d() +
labs(x = "Exportaçoes",
y = "Desempenho da empresa - ROA (Fitted Values)") +
theme_bw()
dados_filtrados %>%
filter(row_number() <= 50) %>%
mutate(fitted_empresa = predict(modelo_final_hlm2, level = 1)) %>%
ggplot() +
geom_point(aes(x = exportacoes, y = fitted_empresa)) +
geom_smooth(aes(x = exportacoes, y = fitted_empresa, color = factor(empresa_factor)),
method = "lm", se = FALSE) +
scale_colour_viridis_d() +
labs(x = "Exportações",
y = "Desempenho da empresa - ROA (Fitted Values)") +
theme_bw()
dados_filtrados_sub <- dados_filtrados %>%
filter(row_number() <= 50)
fitted_values <- predict(modelo_final_hlm2, level = 1, newdata = dados_filtrados_sub)
dados_plot <- dados_filtrados_sub %>%
mutate(fitted_empresa = fitted_values)
dados_plot %>%
ggplot() +
geom_point(aes(x = exportacoes, y = fitted_empresa)) +
geom_smooth(aes(x = exportacoes, y = fitted_empresa, color = factor(empresa_factor)),
method = "lm", se = FALSE) +
scale_colour_viridis_d() +
labs(x = "Exportações",
y = "Desempenho da empresa - ROA (Fitted Values)") +
theme_bw()
#Valores previstos do desempenho das empresas em função da variável exportaçoes para o
#modelo final HLM2 com interceptos e inclinações aleatórios
dados_filtrados %>%
mutate(fitted_empresa = predict(modelo_final_hlm2, level = 1)) %>%
ggplot() +
geom_point(aes(x = exportacoes, y = fitted_empresa)) +
geom_smooth(aes(x = exportacoes, y = fitted_empresa, color = factor(empresa_factor)),
method = "lm", se = F) +
scale_colour_viridis_d() +
labs(x = "Exportaçoes",
y = "Desempenho da empresa - ROA (Fitted Values)") +
theme_bw()
# Filtrar as 10 primeiras empresas
dados_filtrados_10 <- dados_filtrados %>%
top_n(10, empresa_factor)
# Calcular as previsões apenas para as 10 primeiras empresas
fitted_values <- predict(modelo_final_hlm2, level = 1, newdata = dados_filtrados_10)
# Criar um novo conjunto de dados com as previsões
dados_plot <- dados_filtrados_10 %>%
mutate(fitted_empresa = fitted_values)
# Criar o gráfico
dados_plot %>%
ggplot() +
geom_point(aes(x = exportacoes, y = fitted_empresa)) +
geom_smooth(aes(x = exportacoes, y = fitted_empresa, color = factor(empresa_factor)),
method = "lm", se = FALSE) +
scale_colour_viridis_d() +
labs(x = "Exportações",
y = "Desempenho da empresa - ROA (Fitted Values)") +
theme_bw()
# Filtrar as 10 primeiras empresas
dados_filtrados_10 <- dados_filtrados %>%
top_n(50, empresa_factor)
# Calcular as previsões apenas para as 10 primeiras empresas
fitted_values <- predict(modelo_final_hlm2, level = 1, newdata = dados_filtrados_10)
# Criar um novo conjunto de dados com as previsões
dados_plot <- dados_filtrados_10 %>%
mutate(fitted_empresa = fitted_values)
# Criar o gráfico
dados_plot %>%
ggplot() +
geom_point(aes(x = exportacoes, y = fitted_empresa)) +
geom_smooth(aes(x = exportacoes, y = fitted_empresa, color = factor(empresa_factor)),
method = "lm", se = FALSE) +
scale_colour_viridis_d() +
labs(x = "Exportações",
y = "Desempenho da empresa - ROA (Fitted Values)") +
theme_bw()
View(dados_filtrados)
# Filtrar as 10 primeiras empresas
dados_filtrados_30 <- dados_filtrados %>%
filter(empresa_factor >= 1 & empresa_factor <= 30)
# Calcular as previsões apenas para as 10 primeiras empresas
fitted_values <- predict(modelo_final_hlm2, level = 1, newdata = dados_filtrados_30)
# Criar um novo conjunto de dados com as previsões
dados_plot <- dados_filtrados_10 %>%
mutate(fitted_empresa = fitted_values)
# Criar o gráfico
dados_plot %>%
ggplot() +
geom_point(aes(x = exportacoes, y = fitted_empresa)) +
geom_smooth(aes(x = exportacoes, y = fitted_empresa, color = factor(empresa_factor)),
method = "lm", se = FALSE) +
scale_colour_viridis_d() +
labs(x = "Exportações",
y = "Desempenho da empresa - ROA (Fitted Values)") +
theme_bw()
numérico
# Convertendo empresa_factor em numérico
dados_filtrados <- dados_filtrados %>%
mutate(empresa_factor = as.numeric(as.character(empresa_factor)))
# Filtrar as observações onde empresa_factor está no intervalo de 1 a 30
dados_filtrados_30 <- dados_filtrados %>%
filter(empresa_factor >= 1 & empresa_factor <= 30)
# Calcular as previsões apenas para essas observações
fitted_values_30 <- predict(modelo_final_hlm2, level = 1, newdata = dados_filtrados_30)
# Criar um novo conjunto de dados com as previsões
dados_plot_30 <- dados_filtrados_30 %>%
mutate(fitted_empresa = fitted_values_30)
# Criar o gráfico
dados_plot_30 %>%
ggplot() +
geom_point(aes(x = exportacoes, y = fitted_empresa)) +
geom_smooth(aes(x = exportacoes, y = fitted_empresa, color = factor(empresa_factor)),
method = "lm", se = FALSE) +
scale_colour_viridis_d() +
labs(x = "Exportações",
y = "Desempenho da empresa - ROA (Fitted Values)") +
theme_bw()
# Filtrar as observações onde empresa_factor está no intervalo de 1 a 30
dados_filtrados_30 <- dados_filtrados %>%
filter(empresa_factor >= 1 & empresa_factor <= 10)
# Calcular as previsões apenas para essas observações
fitted_values_30 <- predict(modelo_final_hlm2, level = 1, newdata = dados_filtrados_30)
# Criar um novo conjunto de dados com as previsões
dados_plot_30 <- dados_filtrados_30 %>%
mutate(fitted_empresa = fitted_values_30)
# Criar o gráfico
dados_plot_30 %>%
ggplot() +
geom_point(aes(x = exportacoes, y = fitted_empresa)) +
geom_smooth(aes(x = exportacoes, y = fitted_empresa, color = factor(empresa_factor)),
method = "lm", se = FALSE) +
scale_colour_viridis_d() +
labs(x = "Exportações",
y = "Desempenho da empresa - ROA (Fitted Values)") +
theme_bw()
# Criar o gráfico
dados_plot_OLS %>%
ggplot() +
geom_point(aes(x = exportacoes, y = fitted_empresa)) +
geom_smooth(aes(x = exportacoes, y = fitted_empresa)),
# Criar o gráfico
dados_plot_OLS %>%
ggplot() +
geom_point(aes(x = exportacoes, y = fitted_empresa)) +
geom_smooth(aes(x = exportacoes, y = fitted_empresa),
method = "lm", se = FALSE) +
scale_colour_viridis_d() +
labs(x = "Exportações",
y = "Desempenho da empresa - ROA (Fitted Values)") +
theme_bw()
# Criar o gráfico
dados_plot_30 %>%
ggplot() +
geom_point(aes(x = exportacoes, y = fitted_empresa)) +
geom_smooth(aes(x = exportacoes, y = fitted_empresa),
method = "lm", se = FALSE) +
scale_colour_viridis_d() +
labs(x = "Exportações",
y = "Desempenho da empresa - ROA (Fitted Values)") +
theme_bw()
# Criar o gráfico
dados_plot_30 %>%
ggplot() +
geom_point(aes(x = exportacoes, y = fitted_empresa)) +
geom_smooth(aes(x = exportacoes, y = fitted_empresa, color = factor(empresa_factor)),
method = "lm", se = FALSE) +
scale_colour_viridis_d() +
labs(x = "Exportações",
y = "Desempenho da empresa - ROA (Fitted Values)") +
theme_bw()
# Criar o gráfico
dados_plot_30 %>%
ggplot() +
geom_point(aes(x = exportacoes, y = fitted_empresa)) +
geom_smooth(aes(x = exportacoes, y = fitted_empresa),
method = "lm", se = FALSE) +
scale_colour_viridis_d() +
labs(x = "Exportações",
y = "Desempenho da empresa - ROA (Fitted Values)") +
theme_bw()
# Criar o gráfico
dados_plot_30 %>%
ggplot() +
geom_point(aes(x = exportacoes, y = fitted_empresa)) +
geom_smooth(aes(x = exportacoes, y = fitted_empresa, color = factor(empresa_factor)),
method = "lm", se = FALSE) +
scale_colour_viridis_d() +
labs(x = "Exportações",
y = "Desempenho da empresa - ROA (Fitted Values)") +
theme_bw()
# Criar o gráfico
dados_plot_30 %>%
ggplot() +
geom_point(aes(x = exportacoes, y = fitted_empresa)) +
geom_smooth(aes(x = exportacoes, y = fitted_empresa),
method = "lm", se = FALSE) +
scale_colour_viridis_d() +
labs(x = "Exportações",
y = "Desempenho da empresa - ROA (Fitted Values)") +
theme_bw()
